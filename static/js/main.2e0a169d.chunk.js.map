{"version":3,"sources":["Theme/index.tsx","components/TrackLight/index.tsx","components/Measure/index.tsx","components/TrackController/index.tsx","components/Track/index.tsx","components/DrumMachine/index.tsx","App.tsx","sounds/index.ts","serviceWorker.ts","index.tsx"],"names":["themeMap","Map","THEMES","background","machine","border","measureBorder","button","text","name","forEach","theme","set","getTheme","result","get","Error","getThemeNames","keys","Context","React","createContext","addTheme","TrackLight","props","shouldPlay","selected","onNote","howlProvider","play","className","style","backgroundColor","gridColumnStart","indexInMeasure","gridColumnEnd","onClick","setSelected","Measure","trackLights","i","push","key","noteIndex","beats","newArr","slice","setBeats","this","length","measureIndex","gridRowStart","gridRowEnd","gridTemplateColumns","context","getTrackLights","Component","contextType","Themes","ChangeBox","useState","default","sound","setSound","categoryOptions","soundOptions","soundCache","getSoundsFromCategory","category","str","value","iter","categories","next","done","onChange","e","newCategory","target","newSound","changeTrackTo","closeChangeBox","icon","faCheckCircle","TrackController","changing","setChanging","useContext","changeTrack","removeTrack","faTrashAlt","faExchangeAlt","Track","state","howl","updateSound","getSound","howlFrom","trackInfo","then","setState","arr","currentPlayingIndex","Math","floor","beatsPerMeasure","amtMeasures","trackIndex","trackBorder","getMeasures","DrumMachine","window","addEventListener","ev","keyCode","setPlaying","playing","tracks","prevProps","togglePlaying","beatsPerMinute","updateAppWidth","start","reset","task","setInterval","getMeasuresPerTrack","getBeatsPerMeasure","clearTimeout","undefined","map","index","isCurrentlyPlaying","newTracks","setTracks","splice","track","currentTheme","id","getTracks","newSelectionArr","r","c","faPlusCircle","MyApp","appHeight","getInitialSounds","createEmptyTrack","newBeatsPerMeasure","measure","newAmount","oldLength","newMeasureIndex","height","Provider","bpm","useApp","func","windowHeight","max","document","body","scrollHeight","outerHeight","toSet","Controller","showing","setShowing","getShowButton","faCaretLeft","faCaretRight","color","fontSize","numberInput","min","defaultVal","action","toUpperCase","type","defaultValue","toString","width","onKeyUp","val","parseInt","currentTarget","app","faStop","faPlayCircle","setBeatsPerMeasure","setAmountMeasures","themeOptions","themeName","themeNames","newTheme","getThemeInput","Grid","children","RightBar","githubLink","require","open","faGithub","SoundCache","sounds","allSounds","cache","apiLink","Promise","resolve","reject","howlObj","Howl","src","once","err","categoryArr","indexOf","howlMap","pull","values","fetch","response","json","Object","Boolean","location","hostname","match","a","ReactDOM","create","getElementById","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kkBAYMA,EAAW,IAAIC,IAERC,EAAkB,CAC7B,CACEC,WAAY,UACZC,QAAS,UACTC,OAAQ,kBACRC,cAAe,iBACfC,OAAQ,QACRC,KAAM,QACNC,KAAM,WAER,CACEN,WAAY,OACZC,QAAS,OACTC,OAAQ,kBACRC,cAAe,kBACfC,OAAQ,QACRC,KAAM,QACNC,KAAM,QAER,CACEN,WAAY,QACZC,QAAS,QACTC,OAAQ,kBACRC,cAAe,kBACfC,OAAQ,QACRC,KAAM,QACNC,KAAM,SAER,CACEN,WAAY,MACZC,QAAS,SACTC,OAAQ,kBACRC,cAAe,kBACfC,OAAQ,SACRC,KAAM,SACNC,KAAM,YAGVP,EAAOQ,QAAQ,SAAAC,GAAK,OAAEX,EAASY,IAAID,EAAMF,KAAME,KAExC,IACME,EAAW,SAACJ,GACvB,IAAMK,EAASd,EAASe,IAAIN,GAC5B,IAAKK,EACH,MAAM,IAAIE,MAAJ,2BAA8BP,EAA9B,MAER,OAAOK,GAEIG,EAAgB,kBAAMjB,EAASkB,QAC/BC,EAAUC,IAAMC,cAAqBnB,EAAO,IAE1C,GACbA,OAAQA,EACRoB,SAbsB,SAACb,EAAcE,GAAf,OAAgCX,EAASY,IAAIH,EAAME,IAczEE,SAAUA,EACVI,cAAeA,EACfE,QAASA,GC3CII,G,kBAhBqB,SAACC,GACjC,IAAMC,EAAWD,EAAME,UAAYF,EAAMG,OAIzC,OAHIF,GACFD,EAAMI,eAAeC,OAGrB,yBAAKC,UAAU,cAAcC,MAAO,CAClCC,gBAAiBP,EAAa,MAAQD,EAAME,SAAW,QAAU,cACjEO,gBAAiBT,EAAMU,eAAiB,EACxCC,cAAeX,EAAMU,eAAiB,GAEtCE,QAAS,kBAAMZ,EAAMa,aAAab,EAAME,eCR3BY,E,yLAKjB,IAFwB,IAAD,OACjBC,EAAc,GADG,WAEdC,GACPD,EAAYE,KACV,kBAAC,EAAD,CAAYP,eAAgBM,EAAGE,IAAKF,EAAGb,OAAQ,EAAKH,MAAMmB,YAAcH,EACtEZ,aAAc,EAAKJ,MAAMI,aAAcF,SAAU,EAAKF,MAAMoB,MAAMJ,GAClEH,YAAa,SAACX,GACZ,IAAMmB,EAAS,EAAKrB,MAAMoB,MAAME,QAChCD,EAAOL,GAAKd,EACZ,EAAKF,MAAMuB,SAASF,QAPnBL,EAAI,EAAGA,EAAIQ,KAAKxB,MAAMoB,MAAMK,OAAQT,IAAM,EAA1CA,GAYT,OAAOD,I,+BAGP,OACE,yBAAKT,UAAU,UAAUC,MAAO,CAC9BE,gBAAiBe,KAAKxB,MAAM0B,aAAe,EAC3Cf,cAAea,KAAKxB,MAAM0B,aAAe,EACzCC,aAAc,EACdC,WAAY,EACZC,oBAAoB,UAAD,OAAYL,KAAKxB,MAAMoB,MAAMK,OAA7B,WACnB5C,OAAQ2C,KAAKM,QAAQhD,gBAEpB0C,KAAKO,sB,GA7BuBnC,IAAMoC,WAAtBlB,EACZmB,YAAcC,EAAOvC,Q,kBCMxBwC,G,MAAsC,SAACnC,GAA2B,IAAD,EAC3CJ,IAAMwC,SAAgBpC,EAAMqC,SADe,mBAC9DC,EAD8D,KACvDC,EADuD,KAE/DC,EAAkB,GAClBC,EAAe,GAHgD,uBAIrE,YAAgBzC,EAAM0C,WAAWC,sBAAsBL,EAAMM,UAA7D,+CAAoF,CAAC,IAA5EC,EAA2E,QAClFJ,EAAaxB,KAAK,4BAAQ6B,MAAOD,EAAK3B,IAAK2B,GAAMA,KALkB,kFASrE,IAFA,IAAME,EAAO/C,EAAM0C,WAAWM,WAC1B1D,EAASyD,EAAKE,QACV3D,EAAO4D,MAAM,CACnB,IAAIL,EAAMvD,EAAOwD,MACjBN,EAAgBvB,KAAM,4BAAQ6B,MAAOD,EAAK3B,IAAK2B,GAAMA,IACrDvD,EAASyD,EAAKE,OAEhB,OACE,0BAAM3C,UAAU,eACd,4BAAQrB,KAAK,WAAW6D,MAAOR,EAAMM,SAAUO,SAAU,SAACC,GACxD,IAAMC,EAAcD,EAAEE,OAAOR,MAC7B,GAAIO,IAAgBf,EAAMM,SAAU,CAClC,IAAMW,EAAYvD,EAAM0C,WAAWC,sBAAsBU,GAA0B,GACnFd,EAAS,CAAEK,SAAUS,EAAaf,MAAOiB,OAG1Cf,GAEH,4BAAQvD,KAAK,QAAQ6D,MAAOR,EAAMA,MAAOa,SAAU,SAACC,GAClDb,EAAS,CAAEK,SAAUN,EAAMM,SAAUN,MAAOc,EAAEE,OAAOR,UAEpDL,GAEH,yBAAKnC,UAAU,kBAAkBM,QAAS,WACxCZ,EAAMwD,cAAclB,GACpBtC,EAAMyD,mBAEN,kBAAC,IAAD,CAAiBnD,UAAU,QAAQoD,KAAMC,UA0ClCC,EApC0B,SAAC5D,GAAkB,IAAD,EACzBJ,IAAMwC,UAAS,GADU,mBAClDyB,EADkD,KACxCC,EADwC,KAEnD3E,EAAQS,IAAMmE,WAAW7B,EAAOvC,SACtC,OAAKkE,EA0BI,kBAAC,EAAD,CAAWnB,WAAY1C,EAAM0C,WAAYL,QAASrC,EAAMsC,MAAOkB,cAAe,SAAClB,GACpFtC,EAAMgE,YAAY1B,IACjBmB,eAAgB,kBAAMK,GAAY,MA1BnC,yBAAKxD,UAAU,mBAAmBC,MAAO,CACvCE,gBAAiB,EACjBE,cAAe,EACfgB,aAAc,EACdC,WAAY,EACZ/C,OAAQM,EAAML,gBAEd,uBAAGwB,UAAU,cAAcN,EAAMsC,MAAMA,OACvC,yBACEhC,UAAU,uBACVM,QAAS,kBAAMZ,EAAMiE,eACrB1D,MAAO,CAACC,gBAAiBrB,EAAMJ,SAC/B,kBAAC,IAAD,CAAiBuB,UAAU,OAAOoD,KAAMQ,OAE1C,yBACE5D,UAAU,uBACVM,QAAS,kBAAMkD,GAAY,IAC3BvD,MAAO,CAACC,gBAAiBrB,EAAMJ,SAC/B,kBAAC,IAAD,CAAiBuB,UAAU,OAAOoD,KAAMS,SC5D7BC,G,kBAEnB,WAAYpE,GAAe,IAAD,8BACxB,4CAAMA,KACDqE,MAAQ,CAAEC,KAAM,kBAAM,OAC3B,EAAKC,cAHmB,E,8GAMHjC,G,sFACFd,KAAKxB,MAAM0C,WAAW8B,SAASlC,G,UAA5CgC,E,6BAEE,IAAI9E,MAAM,kB,gCAGT8E,G,yIAIY,IAAD,OACpB9C,KAAKiD,SAASjD,KAAKxB,MAAM0E,UAAUpC,OAAOqC,KAAK,SAAAL,GAAI,OAAI,EAAKM,SAAS,CAAEN,KAAMA,Q,0CAI7E9C,KAAK+C,gB,yCAGYvE,GACbA,EAAM0E,UAAUpC,QAAUd,KAAKxB,MAAM0E,UAAUpC,OACjDd,KAAK+C,gB,oCAIc,IAAD,OACdM,EAAqB,GAC3B,IAAKrD,KAAK6C,MAAMC,OACd,OAAOO,EAST,IAPA,IALoB,WAYX7D,GAPa,IAACU,EAQrBmD,EAAI5D,KACF,kBAAC,EAAD,CAASC,IAAKF,EAAGU,aAAcV,EAC7BZ,aAAc,kBAAO,EAAKiE,MAAMC,QAChCnD,WAXiBO,EAWQV,GAVW,IAApC,EAAKhB,MAAM8E,qBACL,EAGHpD,IADgBqD,KAAKC,MAAM,EAAKhF,MAAM8E,oBAAsB,EAAK9E,MAAMiF,iBACrC,EAAKjF,MAAM8E,oBAAsB,EAAK9E,MAAMiF,iBAAmB,GAMvE7D,MAAO,EAAKpB,MAAM0E,UAAUxE,SAASc,GAAIO,SAAU,SAACH,GAC/E,IAAMC,EAAO,EAAKrB,MAAM0E,UAAUxE,SAASoB,QAC3CD,EAAOL,GAAGI,EACV,EAAKpB,MAAMuB,SAASF,QAPnBL,EAAI,EAAGA,EAAIQ,KAAKxB,MAAMkF,YAAalE,IAAM,EAAzCA,GAWT,OAAO6D,I,+BAGP,OACE,yBAAKvE,UAAU,QAAQC,MAAO,CAC5BoB,aAAcH,KAAKxB,MAAMmF,WACzBvD,WAAYJ,KAAKxB,MAAMmF,WAAa,EACpC1E,gBAAiB,EACjBE,cAAea,KAAKxB,MAAMkF,YAC1BrG,OAAQ2C,KAAKM,QAAQsD,cAErB,kBAAC,EAAD,CACE1C,WAAYlB,KAAKxB,MAAM0C,WACvBJ,MAAOd,KAAKxB,MAAM0E,UAAUpC,MAC5B0B,YAAaxC,KAAKxB,MAAMgE,YACxBC,YAAazC,KAAKxB,MAAMiE,cAEzBzC,KAAK6C,MAAMC,OAAS9C,KAAK6D,cAAgB,8C,GAxEfzF,IAAMoC,YAApBoC,EACZnC,YAAcC,EAAOvC,Q,ICFT2F,E,YAGnB,WAAYtF,GAAe,IAAD,8BACxB,4CAAMA,KACDqE,MAAQ,CACXS,qBAAsB,GAExBS,OAAOC,iBAAiB,UAAW,SAACC,GACf,KAAfA,EAAGC,SACL,EAAK1F,MAAM2F,YAAY,EAAK3F,MAAM4F,WAPd,E,mFAaxB,OAAOpE,KAAKxB,MAAM6F,OAAO,GAAG3F,SAASuB,S,2CAIrC,OAAOD,KAAKxB,MAAM6F,OAAO,GAAG3F,SAAS,GAAGuB,S,yCAGvBqE,GACbA,EAAUF,UAAYpE,KAAKxB,MAAM4F,QACnCpE,KAAKuE,cAAcvE,KAAKxB,MAAM4F,SAAS,GAC9BE,EAAUE,iBAAmBxE,KAAKxB,MAAMgG,gBAC7CxE,KAAKxB,MAAM4F,UACbpE,KAAKuE,eAAc,GAAO,GAC1BvE,KAAKuE,eAAc,GAAM,IAGzBvE,KAAKxB,MAAM6F,OAAOpE,SAAWqE,EAAUD,OAAOpE,QAChDD,KAAKxB,MAAMiG,mB,0CAMbzE,KAAKxB,MAAMiG,mB,oCAGSC,EAAgBC,GAAiB,IAAD,OACpD,GAAKD,EAUH,IAAME,EAAOb,OAAOc,YAAY,WAC9B,EAAKzB,SAAS,CACZE,oBAAqB,EAAKT,MAAMS,sBAAyB,EAAKwB,sBAAwB,EAAKC,qBAAwB,EAAI,EAAI,EAAKlC,MAAMS,oBAAsB,EAC5JsB,KAAMA,KAEP,IAAQ5E,KAAKxB,MAAMgG,oBAfZ,CACV,IAAMI,EAAO5E,KAAK6C,MAAM+B,KACpBA,IACFb,OAAOiB,aAAaJ,GACpB5E,KAAKoD,SAAS,CACZE,oBAAqBqB,GAAS,EAAI3E,KAAK6C,MAAMS,oBAC7CsB,UAAMK,Q,kCAYO,IAAD,OAClB,OAAOjF,KAAKxB,MAAM6F,OAAOa,IAAI,SAACpE,EAAOqE,GACnC,OACE,kBAAC,EAAD,CACEjE,WAAY,EAAK1C,MAAM0C,WACvBkE,mBAAoB,EAAK5G,MAAM4F,QAC/BV,YAAa,EAAKoB,sBAClBrB,gBAAiB,EAAKsB,qBACtBpB,WAAYwB,EACZjC,UAAWpC,EACXpB,IAAKyF,EACLpF,SAAU,SAACH,GACT,IAAMyF,EAAY,EAAK7G,MAAM6F,OAAOvE,QACpCuF,EAAUF,GAAOzG,SAAWkB,EAC5B,EAAKpB,MAAM8G,UAAUD,IAEvB5C,YAAa,WACX,GAAiC,IAA7B,EAAKjE,MAAM6F,OAAOpE,OAAtB,CAGA,IAAMoF,EAAY,EAAK7G,MAAM6F,OAAOvE,QACpCuF,EAAUE,OAAOJ,EAAO,GACxB,EAAK3G,MAAM8G,UAAUD,KAEvB7C,YAAa,SAACgD,GACZ,IAAMH,EAAY,EAAK7G,MAAM6F,OAAOvE,QACpCuF,EAAUE,OAAOJ,EAAO,EAAG,CACzBrE,MAAO0E,EACP9G,SAAU,EAAKF,MAAM6F,OAAOc,GAAOzG,WAErC,EAAKF,MAAM8G,UAAUD,IAEvB/B,oBAAqB,EAAKT,MAAMS,0B,+BAK9B,IAAD,OACDmC,EAAezF,KAAKM,QAa1B,OACE,yBAAKoF,GAAG,QAAQ3G,MAAO,CACrBC,gBAAiByG,EAAarI,QAC9BC,OAAQoI,EAAapI,SAEpB2C,KAAK2F,YACN,yBAAK7G,UAAU,qBAAqBC,MAAO,CACzCoB,aAAcH,KAAKxB,MAAM6F,OAAOpE,OAChCG,WAAYJ,KAAKxB,MAAM6F,OAAOpE,OAAS,EACvChB,gBAAiB,EACjBE,cAAea,KAAK8E,uBACnB1F,QAvBa,WAGlB,IAFA,IAAMS,EAAS,EAAKrB,MAAM6F,OAAOvE,QAC3B8F,EAA+B,GAC5BC,EAAI,EAAGA,EAAI,EAAKf,sBAAuBe,IAAK,CACnDD,EAAgBC,GAAK,GACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKf,qBAAsBe,IAC7CF,EAAgBC,GAAGC,IAAK,EAG5BjG,EAAOJ,KAAK,CAAEqB,MAAO,CAAEM,SAAU,WAAYN,MAAO,UAAYpC,SAAUkH,IAC1E,EAAKpH,MAAM8G,UAAUzF,KAcjB,kBAAC,IAAD,CAAiBf,UAAU,WAAWoD,KAAM6D,Y,GA5Hb3H,IAAMoC,WAA1BsD,EACZrD,YAAcC,EAAOvC,Q,YCJT6H,G,kBAEnB,WAAYxH,GAAe,IAAD,8BACxB,4CAAMA,KACDqE,MAAQ,CACXuB,SAAS,EACT6B,UAAW,EACXzB,eAAgB,GAChBH,OAAQ,EAAK6B,mBACbvI,MAAOT,EAAO,IAPQ,E,gFAYxB,SAASiJ,EAAiB/E,EAAkBN,GAE1C,IADA,IAAMuC,EAAmB,GAChBwC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BxC,EAAIwC,GAAK,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACrBzC,EAAIwC,GAAGC,IAAK,EAGhB,MAAO,CACLhF,MAAO,CACLM,SAAUA,EACVN,MAAOA,GAETpC,SAAU2E,GAGd,MAAO,CACL8C,EAAiB,WAAY,YAC7BA,EAAiB,WAAY,YAC7BA,EAAiB,WAAY,a,yCAIdC,GACjB,IAAMvG,EAASG,KAAK6C,MAAMwB,OAAOvE,QACjCD,EAAOnC,QAAQ,SAAA8H,GAAK,OAAIA,EAAM9G,SAAShB,QAAQ,SAAA2I,GAAO,OAAIA,EAAQpG,OAASmG,MAC3EpG,KAAKoD,SAAS,CAAEiB,OAAQxE,M,wCAGRyG,GAAoB,IAAD,OAC7BzG,EAASG,KAAK6C,MAAMwB,OAAOvE,QACjCD,EAAOnC,QAAQ,SAAA8H,GACb,IAAMe,EAAYf,EAAM9G,SAASuB,OAEjC,GADAuF,EAAM9G,SAASuB,OAASqG,EACpBA,EAAYC,EACd,IAAK,IAAIC,EAAkBD,EAAWC,EAAkBhB,EAAM9G,SAASuB,OAAQuG,IAAmB,CAChGhB,EAAM9G,SAAS8H,GAAmB,GAClChB,EAAM9G,SAAS8H,GAAiBvG,OAAS,EAAK4C,MAAMwB,OAAO,GAAG3F,SAAS,GAAGuB,OAC1E,IAAK,IAAIT,EAAI,EAAGA,EAAIgG,EAAM9G,SAAS8H,GAAiBvG,OAAQT,IAC1DgG,EAAM9G,SAAS8H,GAAiBhH,IAAK,KAK7CQ,KAAKoD,SAAS,CAAEiB,OAAQxE,M,+BAGhB,IAAD,OACP,OACE,yBAAKf,UAAU,iBAAiBC,MAAO,CAAE0H,OAAO,GAAD,OAAKzG,KAAK6C,MAAMoD,UAAhB,QAC7C,kBAAC9H,EAAQuI,SAAT,CAAkBpF,MAAOtB,KAAK6C,MAAMlF,OAClC,kBAAC,EAAD,CACEyG,QAASpE,KAAK6C,MAAMuB,QACpBuC,IAAK3G,KAAK6C,MAAM2B,eAChBH,OAAQrE,KAAK6C,MAAMwB,OACnBuC,OAAQ,SAACC,GAAD,OAA4BA,EAAK,MAE3C,kBAAC,EAAD,KACE,kBAAC,EAAD,CACE3F,WAAYlB,KAAKxB,MAAM0C,WACvBkD,QAASpE,KAAK6C,MAAMuB,QACpBI,eAAgBxE,KAAK6C,MAAM2B,eAC3BL,WAAY,SAACC,GACX,EAAKhB,SAAS,CAAEgB,QAASA,KAE3BkB,UAAW,SAACD,GAAD,OAA4B,EAAKjC,SAAS,CAAEiB,OAAQgB,KAC/DhB,OAAQrE,KAAK6C,MAAMwB,OACnBI,eAAgB,WACd,IAAMqC,EAAevD,KAAKwD,IAAIC,SAASC,KAAKC,aAAcnD,OAAOoD,aAC3DC,EAAQ7D,KAAKwD,IAAID,EAAc,EAAKjE,MAAMoD,WAC5C,EAAKpD,MAAMoD,YAAcmB,GAC3B,EAAKhE,SAAS,CAAE6C,UAAWmB,OAKjC,kBAAC,EAAD,a,GA1FuBhJ,IAAMoC,YAyGnC6G,EAAwC,SAAC7I,GAA4B,IAAD,EAC1CJ,IAAMwC,UAAS,GAD2B,mBACjE0G,EADiE,KACxDC,EADwD,KAElE5J,EAAQS,IAAMmE,WAAWpE,GACzBqJ,EAAgB,kBACpB,yBAAK1I,UAAU,cACbM,QAAS,kBAAMmI,GAAYD,KAC3B,kBAAC,IAAD,CAAiBpF,KAAOoF,EAAyBG,IAAfC,IAA4B3I,MAAO,CAAE4I,MAAOhK,EAAMH,KAAMoK,SAAU,YASlGC,EAAc,SAACpK,EAAcqK,EAAaf,EAAagB,EAAoBC,GAC/E,OACE,yBAAKlJ,UAAS,UAAKrB,EAAL,qBACZ,uBAAGqB,UAAS,cAAiBC,MAAO,CAAE4I,MAAOhK,EAAMH,OAChDC,EAAKwK,eAER,2BAAOnJ,UAAS,YAAeoJ,KAAK,SAASzK,KAAMA,EAAKwK,cACtDH,IAAKA,EAAKf,IAAKA,EAAKoB,aAAcJ,EAAWK,WAC7CrJ,MAAO,CAAEsJ,MAAO,QAChBC,QAAS,SAAC1G,GACR,GAAkB,KAAdA,EAAEsC,QAAgB,CACpB,IAAIqE,EAAMC,SAAS5G,EAAE6G,cAAcnH,OAUnC,OATIiH,EAAMT,GACRlG,EAAE6G,cAAcnH,MAAQwG,EAAIM,WAC5BG,EAAMT,GAECS,EAAMxB,IACbnF,EAAE6G,cAAcnH,MAAQyF,EAAIqB,WAC5BG,EAAMxB,GAERvI,EAAMoI,OAAO,SAAA8B,GAAG,OAAIV,EAAOU,EAAKH,MACzB,QA+BnB,OAAIjB,EAEA,yBAAKxI,UAAU,8BA3DjB,yBAAKA,UAAU,cACbM,QAAS,kBAAMZ,EAAMoI,OAAO,SAAA8B,GAAG,OAAIA,EAAItF,SAAS,CAAEgB,SAAU5F,EAAM4F,cAClE,kBAAC,IAAD,CAAiBtF,UAAU,cAAcoD,KAAO1D,EAAM4F,QAAyBuE,IAAfC,OA2D7DpB,IACAK,EAAY,MAAO,GAAI,IAAKrJ,EAAMmI,IAAK,SAAC+B,EAAKH,GAAN,OAAcG,EAAItF,SAAS,CAAEoB,eAAgB+D,MACpFV,EAAY,QAAS,EAAG,EAAGrJ,EAAM6F,OAAO,GAAG3F,SAAS,GAAGuB,OAAQ,SAACyI,EAAKH,GAAN,OAAcG,EAAIG,mBAAmBN,KACpGV,EAAY,WAAY,EAAG,GAAIrJ,EAAM6F,OAAO,GAAG3F,SAASuB,OAAQ,SAACyI,EAAKH,GAAN,OAAcG,EAAII,kBAAkBP,KAhCrF,WAIpB,IAHA,IAAMQ,EAAe9K,IACjB+K,EAAYD,EAAatH,OACvBwH,EAAa,IACXD,EAAUtH,MAChBuH,EAAWxJ,KAAK,4BAAQ6B,MAAO0H,EAAU1H,MAAO5B,IAAKsJ,EAAU1H,OAAQ0H,EAAU1H,QACjF0H,EAAYD,EAAatH,OAQ3B,OACE,yBAAK3C,UAAU,yBACb,uBAAGA,UAAU,cAAcC,MAAO,CAAE4I,MAAOhK,EAAMH,OAAjD,SAGA,4BAAQC,KAAK,QAAQqB,UAAU,YAAYwC,MAAO3D,EAAMF,KAAMkE,SAX7C,SAACC,GACpB,IAAMsH,EAAWrL,EAAS+D,EAAEE,OAAOR,OAC/B4H,GACF1K,EAAMoI,OAAO,SAAA8B,GAAG,OAAIA,EAAItF,SAAS,CAAEzF,MAAOuL,QASvCD,IAaFE,GACD,uBAAGzD,GAAG,eAAe3G,MAAO,CAAC4I,MAAOhK,EAAMH,OAA1C,4CAKF,yBAAKsB,UAAU,qCACZ0I,MAMH4B,EAAiB,SAAC5K,GACtB,IAAMb,EAAQS,IAAMmE,WAAWpE,GAC/B,OACE,yBAAKuH,GAAG,YAAY3G,MAAO,CAAE5B,WAAYQ,EAAMR,aAC5CqB,EAAM6K,WAKPC,EAAqB,WACzB,IAAMC,EAAaC,EAAQ,IAAkBD,WAC7C,OACE,yBAAK7D,GAAG,SACN,yBAAKtG,QAAS,WACZ2E,OAAO0F,KAAKF,EAAY,YAExB,kBAAC,IAAD,CAAiBzK,UAAU,cAAcoD,KAAMwH,S,QCjO1CC,EAAb,WAKE,WAAYC,GAAgC,IAAD,gCAJ1BC,eAI0B,OAH1BC,MAAwC,IAAI7M,IAGlB,KAF1B8M,QAAkBP,EAAQ,IAAmBO,QAG5D/J,KAAK6J,UAAYD,EACjBA,EAAOlM,QAAQ,SAAC4D,EAAiB5B,GAC/B,EAAKoK,MAAMlM,IAAI8B,EAAK,IAAIzC,OAR9B,iDAwBcmE,EAAkBN,GAA+B,IAAD,OAC1D,OAAO,IAAIkJ,QAAc,SAACC,EAASC,GACjC,IAAMC,EAAU,IAAIC,OAAK,CACvBC,IAAK,CAAC,GAAD,OAAI,EAAKN,QAAT,kBAA0B3I,EAA1B,YAAsCN,EAAtC,WAEPqJ,EAAQG,KAAK,OAAQ,kBAAML,EAAQE,KACnCA,EAAQG,KAAK,YAAa,SAACC,GAAD,OAAcL,EAAO,uBAAyBK,SA9B9E,kEAkCmBnJ,EAAkBN,GAlCrC,+EAmCU0J,EAAcxK,KAAK6J,UAAU9L,IAAIqD,GAnC3C,8CAqCa6D,GArCb,WAuCwC,IAAhCuF,EAAYC,QAAQ3J,GAvC5B,8CAwCamE,GAxCb,UA0CQyF,EAAU,IAAIzN,KACZa,EAASkC,KAAK8J,MAAM/L,IAAIqD,MAE5BsJ,EAAU5M,GA7ChB,KA+CiB4M,EAAQ3M,IAAI+C,GA/C7B,uCA+C6Cd,KAAK2K,KAAKvJ,EAAUN,GA/CjE,mCA+CUgC,EA/CV,KAgDI4H,EAAQ9M,IAAIkD,EAAOgC,GAhDvB,kBAiDW,kBAAMA,IAjDjB,+KAoDwBhC,GApDxB,gFAqDiBd,KAAKjC,IAAI+C,EAAMM,SAAUN,EAAMA,OArDhD,yLAwD+BM,GAC3B,OAAOpB,KAAK6J,UAAU9L,IAAIqD,KAzD9B,iCA6DI,OAAOpB,KAAK6J,UAAU3L,SA7D1B,6BAiEI,OAAO8B,KAAK6J,UAAUe,YAjE1B,uJAYUhB,EAAS,IAAI3M,IAZvB,SAa2B4N,MAAM,GAAD,OAAIrB,EAAQ,IAAmBO,QAA/B,WAAgD5G,KAAK,SAAA2H,GAAQ,OAAIA,EAASC,SAb1G,cAaUD,EAbV,OAcIE,OAAO9M,KAAK4M,GAAUpN,QAAQ,SAAAgC,GAC5BoL,EAASpL,GAAKhC,QAAQ,SAACoD,GACrB,IAAMuC,EAAMuG,EAAO7L,IAAI2B,GAAOkK,EAAO7L,IAAI2B,GAAmB,GAC5D2D,EAAI5D,KAAKqB,GACT8I,EAAOhM,IAAI8B,EAAK2D,OAlBxB,kBAqBW,IAAIsG,EAAWC,IArB1B,sGCQoBqB,QACW,cAA7BlH,OAAOmH,SAASC,UAEe,UAA7BpH,OAAOmH,SAASC,UAEhBpH,OAAOmH,SAASC,SAASC,MACvB,2D,2CCXN,sBAAAC,EAAA,iEACEC,IADF,OAAAD,EAAA,KACmB,EADnB,SACyC1B,EAAW4B,SADpD,yBACuBrK,WADvB,wDACkE8F,SAASwE,eAAe,QAD1F,KACWC,OADX,gE,0DAIAA,GD8HM,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzI,KAAK,SAAA0I,GACjCA,EAAaC,iB","file":"static/js/main.2e0a169d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface Theme {\n  background: string,\n  machine: string,\n  border: string,\n  measureBorder: string,\n  button: string,\n  text: string,\n  name: string\n}\n\nconst themeMap = new Map<string, Theme>();\n\nexport const THEMES: Theme[] = [\n  {\n    background: \"#F7D87C\",\n    machine: \"#28CCFA\",\n    border: \"5px solid black\",\n    measureBorder: \"2px solid gray\",\n    button: \"white\",\n    text: \"black\",\n    name: \"default\"\n  },\n  {\n    background: \"gray\",\n    machine: \"gray\",\n    border: \"5px solid black\",\n    measureBorder: \"2px solid black\",\n    button: \"black\",\n    text: \"white\",\n    name: \"dark\"\n  },\n  {\n    background: \"black\",\n    machine: \"white\",\n    border: \"5px solid black\",\n    measureBorder: \"2px solid black\",\n    button: \"black\",\n    text: \"white\",\n    name: \"ghost\"\n  },\n  {\n    background: \"red\",\n    machine: \"yellow\",\n    border: \"5px solid black\",\n    measureBorder: \"2px solid black\",\n    button: \"orange\",\n    text: \"yellow\",\n    name: \"hot dog\"\n  }\n]\nTHEMES.forEach(theme=>themeMap.set(theme.name, theme));\n\nexport const addTheme = (name: string, theme: Theme) => themeMap.set(name, theme);\nexport const getTheme = (name: string) => {\n  const result = themeMap.get(name);\n  if (!result) {\n    throw new Error(`No theme of name ${name}!`);\n  }\n  return result;\n}\nexport const getThemeNames = () => themeMap.keys();\nexport const Context = React.createContext<Theme>(THEMES[0])\n\nexport default {\n  THEMES: THEMES,\n  addTheme: addTheme,\n  getTheme: getTheme,\n  getThemeNames: getThemeNames,\n  Context: Context\n}\n","import React from \"react\";\nimport \"./style.scss\";\n\ninterface Props {\n  indexInMeasure: number,\n  howlProvider: () => Howl,\n  onNote: boolean,\n  selected: boolean,\n  setSelected: (selected: boolean)=>void\n}\n\nconst TrackLight: React.FC<Props> = (props:Props)=>{\n    const shouldPlay=props.selected && props.onNote;\n    if (shouldPlay) {\n      props.howlProvider().play();\n    }\n    return (\n      <div className=\"track-light\" style={{\n        backgroundColor: shouldPlay ? \"red\" : props.selected ? \"white\" : \"transparent\",\n        gridColumnStart: props.indexInMeasure + 1,\n        gridColumnEnd: props.indexInMeasure + 2\n      }}\n        onClick={() => props.setSelected(!props.selected)}>\n      </div>\n    )\n}\n\nexport default TrackLight;\n","import React from \"react\";\nimport \"./style.scss\";\nimport Themes from \"../../Theme\";\nimport TrackLight from \"../TrackLight\";\n\ninterface Props {\n  beats: boolean[],\n  setBeats: (beats: boolean[]) => void,\n  measureIndex: number,\n  noteIndex: number,\n  howlProvider: () => Howl\n}\n\n\nexport default class Measure extends React.Component<Props>{\n  static contextType = Themes.Context;\n\n  private getTrackLights() {\n    const trackLights = [];\n    for (let i = 0; i < this.props.beats.length; i++) {\n      trackLights.push((\n        <TrackLight indexInMeasure={i} key={i} onNote={this.props.noteIndex === i}\n          howlProvider={this.props.howlProvider} selected={this.props.beats[i]}\n          setSelected={(selected: boolean) => {\n            const newArr = this.props.beats.slice();\n            newArr[i] = selected;\n            this.props.setBeats(newArr)\n          }}>\n        </TrackLight>\n      ))\n    }\n    return trackLights;\n  }\n  render() {\n    return (\n      <div className=\"measure\" style={{\n        gridColumnStart: this.props.measureIndex + 2,\n        gridColumnEnd: this.props.measureIndex + 3,\n        gridRowStart: 1,\n        gridRowEnd: 2,\n        gridTemplateColumns: `repeat(${this.props.beats.length}, auto)`,\n        border: this.context.measureBorder\n      }}>\n        {this.getTrackLights()}\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport Themes from \"../../Theme\";\nimport { Sound, SoundCache } from \"../../sounds\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExchangeAlt, faTrashAlt, faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./style.scss\";\n\ninterface Props {\n  sound: Sound,\n  removeTrack: () => void,\n  changeTrack: (track: Sound) => void,\n  soundCache: SoundCache\n}\n\ninterface ChangeBoxProps {\n  soundCache: SoundCache,\n  default: Sound,\n  changeTrackTo: (sound: Sound) => void\n  closeChangeBox: () => void\n}\n\nconst ChangeBox: React.FC<ChangeBoxProps> = (props: ChangeBoxProps) => {\n  const [sound, setSound] = React.useState<Sound>(props.default);\n  const categoryOptions = [];\n  const soundOptions = [];\n  for (let str of props.soundCache.getSoundsFromCategory(sound.category) as string[]) {\n    soundOptions.push(<option value={str} key={str}>{str}</option>)\n  }\n  const iter = props.soundCache.categories;\n  let result = iter.next();\n  while (!result.done) {\n    let str = result.value;\n    categoryOptions.push((<option value={str} key={str}>{str}</option>));\n    result = iter.next();\n  }\n  return (\n    <form className=\"change-form\">\n      <select name=\"category\" value={sound.category} onChange={(e) => {\n        const newCategory = e.target.value;\n        if (newCategory !== sound.category) {\n          const newSound = (props.soundCache.getSoundsFromCategory(newCategory) as string[])[0]\n          setSound({ category: newCategory, sound: newSound })\n        }\n      }}>\n        {categoryOptions}\n      </select>\n      <select name=\"sound\" value={sound.sound} onChange={(e) => {\n        setSound({ category: sound.category, sound: e.target.value })\n      }}>\n        {soundOptions}\n      </select>\n      <div className=\"check-container\" onClick={() => {\n        props.changeTrackTo(sound);\n        props.closeChangeBox();\n      }}>\n        <FontAwesomeIcon className=\"check\" icon={faCheckCircle} />\n      </div>\n    </form>\n  )\n}\n\nconst TrackController: React.FC<Props> = (props: Props) => {\n  const [changing, setChanging] = React.useState(false);\n  const theme = React.useContext(Themes.Context);\n  if (!changing) {\n    return (\n      <div className=\"track-controller\" style={{\n        gridColumnStart: 1,\n        gridColumnEnd: 2,\n        gridRowStart: 0,\n        gridRowEnd: 2,\n        border: theme.measureBorder\n      }}>\n        <p className=\"track-name\">{props.sound.sound}</p>\n        <div\n          className=\"remove-button button\"\n          onClick={() => props.removeTrack()}\n          style={{backgroundColor: theme.button}}>\n          <FontAwesomeIcon className=\"icon\" icon={faTrashAlt} />\n        </div>\n        <div\n          className=\"change-button button\"\n          onClick={() => setChanging(true)}\n          style={{backgroundColor: theme.button}}>\n          <FontAwesomeIcon className=\"icon\" icon={faExchangeAlt} />\n        </div>\n      </div>\n    )\n  }\n  else {\n    return <ChangeBox soundCache={props.soundCache} default={props.sound} changeTrackTo={(sound: Sound) => {\n      props.changeTrack(sound);\n    }} closeChangeBox={() => setChanging(false)} />\n  }\n\n}\n\nexport default TrackController;\n","import React from \"react\";\nimport { SoundCache, Sound, TrackInfo } from \"../../sounds\";\nimport Measure from \"../Measure\";\nimport Themes from \"../../Theme\";\nimport TrackController from \"../TrackController\";\nimport \"./style.scss\"\n\ninterface Props {\n  soundCache: SoundCache,\n  isCurrentlyPlaying: boolean,\n  trackInfo: TrackInfo,\n  amtMeasures: number,\n  beatsPerMeasure: number,\n  trackIndex: number,\n  removeTrack: () => void,\n  changeTrack: (track: Sound) => void,\n  setBeats: (beats: boolean[][]) => void,\n  currentPlayingIndex: number\n}\n\ninterface State {\n  howl: () => Howl | null\n}\n\nexport default class Track extends React.Component<Props, State>{\n  static contextType = Themes.Context;\n  constructor(props: Props) {\n    super(props);\n    this.state = { howl: () => null }\n    this.updateSound();\n  }\n\n  private async howlFrom(sound: Sound) {\n    const howl = await this.props.soundCache.getSound(sound);\n    if (!howl) {\n      throw new Error(\"Invalid sound!\");\n    }\n    else {\n      return howl;\n    }\n  }\n\n  private updateSound() {\n    this.howlFrom(this.props.trackInfo.sound).then(howl => this.setState({ howl: howl }));\n  }\n\n  componentDidMount() {\n    this.updateSound();\n  }\n\n  componentDidUpdate(props: Props) {\n    if (props.trackInfo.sound !== this.props.trackInfo.sound) {\n      this.updateSound();\n    }\n  }\n\n  private getMeasures() {\n    const arr: JSX.Element[] = [];\n    if (!this.state.howl()) {\n      return arr;\n    }\n    const noteIndexFrom = (measureIndex: number) => {\n      if (this.props.currentPlayingIndex === -1) {\n        return -1;\n      }\n      const currentMeasure = Math.floor(this.props.currentPlayingIndex / this.props.beatsPerMeasure);\n      return measureIndex === currentMeasure ? this.props.currentPlayingIndex % this.props.beatsPerMeasure : -1;\n    }\n    for (let i = 0; i < this.props.amtMeasures; i++) {\n      arr.push((\n        <Measure key={i} measureIndex={i}\n          howlProvider={() => (this.state.howl() as Howl)}\n          noteIndex={noteIndexFrom(i)} beats={this.props.trackInfo.selected[i]} setBeats={(beats: boolean[]) => {\n            const newArr=this.props.trackInfo.selected.slice();\n            newArr[i]=beats;\n            this.props.setBeats(newArr);\n          }} />\n      ));\n    }\n    return arr;\n  }\n  render() {\n    return (\n      <div className=\"track\" style={{\n        gridRowStart: this.props.trackIndex,\n        gridRowEnd: this.props.trackIndex + 1,\n        gridColumnStart: 1,\n        gridColumnEnd: this.props.amtMeasures,\n        border: this.context.trackBorder\n      }}>\n        <TrackController\n          soundCache={this.props.soundCache}\n          sound={this.props.trackInfo.sound}\n          changeTrack={this.props.changeTrack}\n          removeTrack={this.props.removeTrack}\n        />\n        {this.state.howl() ? this.getMeasures() : <p>Loading...</p>}\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport Themes from \"../../Theme\";\nimport \"./style.scss\";\nimport { SoundCache, Sound, TrackInfo } from \"../.././sounds\";\nimport Track from \"../Track\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface Props {\n  soundCache: SoundCache,\n  playing: boolean,\n  setPlaying: (playing: boolean) => void,\n  updateAppWidth: () => void,\n  beatsPerMinute: number,\n  tracks: TrackInfo[],\n  setTracks: (newTracks: TrackInfo[]) => void\n};\n\ninterface State {\n  currentPlayingIndex: number,\n  task?: number\n};\n\nexport default class DrumMachine extends React.Component<Props, State>{\n  static contextType = Themes.Context;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      currentPlayingIndex: -1\n    }\n    window.addEventListener(\"keydown\", (ev: KeyboardEvent) => {\n      if (ev.keyCode === 80) {\n        this.props.setPlaying(!this.props.playing);\n      }\n    });\n  }\n\n  private getMeasuresPerTrack() {\n    return this.props.tracks[0].selected.length;\n  }\n\n  private getBeatsPerMeasure() {\n    return this.props.tracks[0].selected[0].length;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.playing !== this.props.playing) {\n      this.togglePlaying(this.props.playing, true);\n    } else if (prevProps.beatsPerMinute !== this.props.beatsPerMinute) {\n      if (this.props.playing) {\n        this.togglePlaying(false, true);\n        this.togglePlaying(true, false);\n      }\n    }\n    if (this.props.tracks.length !== prevProps.tracks.length) {\n      this.props.updateAppWidth();\n    }\n\n  }\n\n  componentDidMount() {\n    this.props.updateAppWidth();\n  }\n\n  private togglePlaying(start: boolean, reset: boolean) {\n    if (!start) {\n      const task = this.state.task;\n      if (task) {\n        window.clearTimeout(task);\n        this.setState({\n          currentPlayingIndex: reset ? -1 : this.state.currentPlayingIndex,\n          task: undefined\n        });\n      }\n    } else {\n      const task = window.setInterval(() => {\n        this.setState({\n          currentPlayingIndex: this.state.currentPlayingIndex === (this.getMeasuresPerTrack() * this.getBeatsPerMeasure()) - 1 ? 0 : this.state.currentPlayingIndex + 1,\n          task: task,\n        });\n      }, 60000 / this.props.beatsPerMinute);\n    }\n  }\n  private getTracks() {\n    return this.props.tracks.map((sound, index) => {\n      return (\n        <Track\n          soundCache={this.props.soundCache}\n          isCurrentlyPlaying={this.props.playing}\n          amtMeasures={this.getMeasuresPerTrack()}\n          beatsPerMeasure={this.getBeatsPerMeasure()}\n          trackIndex={index}\n          trackInfo={sound}\n          key={index}\n          setBeats={(beats: boolean[][]) => {\n            const newTracks = this.props.tracks.slice();\n            newTracks[index].selected = beats;\n            this.props.setTracks(newTracks);\n          }}\n          removeTrack={() => {\n            if (this.props.tracks.length === 1) {\n              return;\n            }\n            const newTracks = this.props.tracks.slice();\n            newTracks.splice(index, 1);\n            this.props.setTracks(newTracks);\n          }}\n          changeTrack={(track: Sound) => {\n            const newTracks = this.props.tracks.slice();\n            newTracks.splice(index, 1, {\n              sound: track,\n              selected: this.props.tracks[index].selected\n            });\n            this.props.setTracks(newTracks)\n          }}\n          currentPlayingIndex={this.state.currentPlayingIndex}\n        />\n      )\n    });\n  }\n  render() {\n    const currentTheme = this.context;\n    const addNewTrack = () => {\n      const newArr = this.props.tracks.slice();\n      const newSelectionArr: boolean[][] = [];\n      for (let r = 0; r < this.getMeasuresPerTrack(); r++) {\n        newSelectionArr[r] = [];\n        for (let c = 0; c < this.getBeatsPerMeasure(); c++) {\n          newSelectionArr[r][c] = false;\n        }\n      }\n      newArr.push({ sound: { category: \"Acoustic\", sound: \"Tom-04\" }, selected: newSelectionArr });\n      this.props.setTracks(newArr);\n    }\n    return (\n      <div id=\"frame\" style={{\n        backgroundColor: currentTheme.machine,\n        border: currentTheme.border\n      }}>\n        {this.getTracks()}\n        <div className=\"add-icon-container\" style={{\n          gridRowStart: this.props.tracks.length,\n          gridRowEnd: this.props.tracks.length + 1,\n          gridColumnStart: 1,\n          gridColumnEnd: this.getMeasuresPerTrack()\n        }} onClick={addNewTrack}>\n          <FontAwesomeIcon className=\"add-icon\" icon={faPlusCircle} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport { Theme, getTheme, getThemeNames, THEMES, Context } from \"./Theme\";\nimport DrumMachine from \"./components/DrumMachine\";\nimport { SoundCache, TrackInfo } from \"./sounds\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretLeft, faCaretRight, faPlayCircle, faStop } from \"@fortawesome/free-solid-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport \"./App.scss\";\n\ninterface Props {\n  soundCache: SoundCache\n};\ninterface State {\n  playing: boolean,\n  appHeight: number,\n  tracks: TrackInfo[],\n  beatsPerMinute: number,\n  theme: Theme\n};\n\nexport default class MyApp extends React.Component<Props, State>{\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      playing: false,\n      appHeight: 0,\n      beatsPerMinute: 90,\n      tracks: this.getInitialSounds(),\n      theme: THEMES[0]\n    };\n  }\n\n  private getInitialSounds() {\n    function createEmptyTrack(category: string, sound: string): TrackInfo {\n      const arr: boolean[][] = [];\n      for (let r = 0; r < 4; r++) {\n        arr[r] = [];\n        for (let c = 0; c < 4; c++) {\n          arr[r][c] = false;\n        }\n      }\n      return {\n        sound: {\n          category: category,\n          sound: sound\n        },\n        selected: arr\n      }\n    }\n    return [\n      createEmptyTrack(\"Acoustic\", \"ClHat-01\"),\n      createEmptyTrack(\"Acoustic\", \"Crash-02\"),\n      createEmptyTrack(\"Acoustic\", \"Tom-04\")\n    ]\n  }\n\n  setBeatsPerMeasure(newBeatsPerMeasure: number) {\n    const newArr = this.state.tracks.slice();\n    newArr.forEach(track => track.selected.forEach(measure => measure.length = newBeatsPerMeasure));\n    this.setState({ tracks: newArr });\n  }\n\n  setAmountMeasures(newAmount: number) {\n    const newArr = this.state.tracks.slice();\n    newArr.forEach(track => {\n      const oldLength = track.selected.length;\n      track.selected.length = newAmount;\n      if (newAmount > oldLength) {\n        for (let newMeasureIndex = oldLength; newMeasureIndex < track.selected.length; newMeasureIndex++) {\n          track.selected[newMeasureIndex] = [];\n          track.selected[newMeasureIndex].length = this.state.tracks[0].selected[0].length;\n          for (let i = 0; i < track.selected[newMeasureIndex].length; i++) {\n            track.selected[newMeasureIndex][i] = false;\n          }\n        }\n      }\n    });\n    this.setState({ tracks: newArr });\n  }\n\n  render() {\n    return (\n      <div className=\"DrumMachineApp\" style={{ height: `${this.state.appHeight}px` }}>\n        <Context.Provider value={this.state.theme}>\n          <Controller\n            playing={this.state.playing}\n            bpm={this.state.beatsPerMinute}\n            tracks={this.state.tracks}\n            useApp={(func: (app: MyApp)=>void)=>func(this)}>\n          </Controller>\n          <Grid>\n            <DrumMachine\n              soundCache={this.props.soundCache}\n              playing={this.state.playing}\n              beatsPerMinute={this.state.beatsPerMinute}\n              setPlaying={(playing: boolean) => {\n                this.setState({ playing: playing });\n              }}\n              setTracks={(newTracks: TrackInfo[]) => this.setState({ tracks: newTracks })}\n              tracks={this.state.tracks}\n              updateAppWidth={() => {\n                const windowHeight = Math.max(document.body.scrollHeight, window.outerHeight);\n                const toSet = Math.max(windowHeight, this.state.appHeight);\n                if (this.state.appHeight !== toSet) {\n                  this.setState({ appHeight: toSet });\n                }\n              }}\n            >\n            </DrumMachine>\n            <RightBar />\n          </Grid>\n        </Context.Provider>\n      </div>\n    );\n  }\n\n}\n\ninterface ControllerProps {\n  playing: boolean,\n  bpm: number,\n  tracks: TrackInfo[],\n  useApp: (func: (app: MyApp) => void) => void\n}\nconst Controller: React.FC<ControllerProps> = (props: ControllerProps) => {\n  const [showing, setShowing] = React.useState(false);\n  const theme = React.useContext(Context);\n  const getShowButton = () => (\n    <div className=\"show-button\"\n      onClick={() => setShowing(!showing)}>\n      <FontAwesomeIcon icon={!showing ? faCaretRight : faCaretLeft} style={{ color: theme.text, fontSize: \"200%\" }} />\n    </div>\n  )\n  const getPlayButton = () => (\n    <div className=\"play-button\"\n      onClick={() => props.useApp(app => app.setState({ playing: !props.playing }))}>\n      <FontAwesomeIcon className=\"toggle-icon\" icon={!props.playing ? faPlayCircle : faStop} />\n    </div>\n  )\n  const numberInput = (name: string, min: number, max: number, defaultVal: number, action: (app: MyApp, val: number) => void) => {\n    return (\n      <div className={`${name}-control control`}>\n        <p className={`input-title`} style={{ color: theme.text }}>\n          {name.toUpperCase()}\n        </p>\n        <input className={`input-box`} type=\"number\" name={name.toUpperCase()}\n          min={min} max={max} defaultValue={defaultVal.toString()}\n          style={{ width: \"100%\" }}\n          onKeyUp={(e) => {\n            if (e.keyCode === 13) {\n              let val = parseInt(e.currentTarget.value);\n              if (val < min) {\n                e.currentTarget.value = min.toString();\n                val = min;\n              }\n              else if (val > max) {\n                e.currentTarget.value = max.toString();\n                val = max;\n              }\n              props.useApp(app => action(app, val));\n              return false;\n            }\n          }} />\n      </div>\n    )\n  }\n  const getThemeInput = () => {\n    const themeOptions = getThemeNames();\n    let themeName = themeOptions.next();\n    const themeNames = [];\n    while (!themeName.done) {\n      themeNames.push(<option value={themeName.value} key={themeName.value}>{themeName.value}</option>);\n      themeName = themeOptions.next();\n    }\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n      const newTheme = getTheme(e.target.value);\n      if (newTheme) {\n        props.useApp(app => app.setState({ theme: newTheme }))\n      }\n    }\n    return (\n      <div className=\"theme-control control\">\n        <p className=\"input-title\" style={{ color: theme.text }}>\n          THEME\n        </p>\n        <select name=\"theme\" className=\"input-box\" value={theme.name} onChange={handleChange}>\n          {themeNames}\n        </select>\n      </div>\n    )\n  }\n  if (showing) {\n    return (\n      <div className=\"play-controller controller\">\n        {getPlayButton()}\n        {getShowButton()}\n        {numberInput(\"bpm\", 10, 500, props.bpm, (app, val) => app.setState({ beatsPerMinute: val }))}\n        {numberInput(\"beats\", 1, 8, props.tracks[0].selected[0].length, (app, val) => app.setBeatsPerMeasure(val))}\n        {numberInput(\"measures\", 1, 16, props.tracks[0].selected.length, (app, val) => app.setAmountMeasures(val))}\n        {getThemeInput()}\n        <p id=\"instructions\" style={{color: theme.text}}>Press Enter in a box to update changes!</p>\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"hidden-play-controller controller\">\n        {getShowButton()}\n      </div>\n    )\n  }\n}\n\nconst Grid: React.FC = (props: any) => {\n  const theme = React.useContext(Context);\n  return (\n    <div id=\"root-grid\" style={{ background: theme.background }}>\n      {props.children}\n    </div>\n  )\n}\n\nconst RightBar: React.FC = () => {\n  const githubLink = require(\"./options.json\").githubLink;\n  return (\n    <div id=\"right\">\n      <div onClick={() => {\n        window.open(githubLink, \"_blank\");\n      }}>\n        <FontAwesomeIcon className=\"github-icon\" icon={faGithub} />\n      </div>\n    </div>\n  )\n}\n","import { Howl } from \"howler\";\n\ntype HowlProvider = () => Howl\n\nexport class SoundCache {\n  private readonly allSounds: Map<string, string[]>;\n  private readonly cache: Map<string, Map<string, Howl>> = new Map();\n  private readonly apiLink: string = require(\"../options.json\").apiLink;\n\n  constructor(sounds: Map<string, string[]>) {\n    this.allSounds = sounds;\n    sounds.forEach((value: string[], key: string) => {\n      this.cache.set(key, new Map());\n    })\n  }\n  public static async create(): Promise<SoundCache> {\n    const sounds = new Map<string, string[]>();\n    const response = await fetch(`${require(\"../options.json\").apiLink}/paths`).then(response => response.json());\n    Object.keys(response).forEach(key => {\n      response[key].forEach((sound: string) => {\n        const arr = sounds.get(key) ? sounds.get(key) as string[] : [];\n        arr.push(sound);\n        sounds.set(key, arr);\n      })\n    });\n    return new SoundCache(sounds);\n  }\n\n  public pull(category: string, sound: string): Promise<Howl> {\n    return new Promise<Howl>((resolve, reject) => {\n      const howlObj = new Howl({\n        src: [`${this.apiLink}/sound/${category}/${sound}.wav`]\n      });\n      howlObj.once(\"load\", () => resolve(howlObj));\n      howlObj.once(\"loaderror\", (err: any) => reject(\"Error loading howl! \" + err));\n    });\n  }\n\n  public async get(category: string, sound: string): Promise<HowlProvider | undefined> {\n    const categoryArr = this.allSounds.get(category);\n    if (!categoryArr) {\n      return undefined;\n    }\n    if (categoryArr.indexOf(sound) === -1) {\n      return undefined;\n    }\n    let howlMap = new Map();\n    const result = this.cache.get(category);\n    if (result) {\n      howlMap = result;\n    }\n    const howl = howlMap.get(sound) || await this.pull(category, sound);\n    howlMap.set(sound, howl);\n    return () => howl;\n  }\n\n  public async getSound(sound: Sound): Promise<HowlProvider | undefined> {\n    return await this.get(sound.category, sound.sound);\n  }\n\n  public getSoundsFromCategory(category: string) {\n    return this.allSounds.get(category);\n  }\n\n  get categories() {\n    return this.allSounds.keys();\n  }\n\n  get sounds() {\n    return this.allSounds.values();\n  }\n\n\n}\n\nexport interface Sound {\n  category: string,\n  sound: string\n}\n\nexport interface TrackInfo {\n  sound: Sound\n  selected: boolean[][]\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { SoundCache} from \"./sounds\";\nimport * as serviceWorker from './serviceWorker';\n\nasync function render() {\n  ReactDOM.render(<App soundCache={await SoundCache.create()} />, document.getElementById('root'));\n}\n\nrender();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}